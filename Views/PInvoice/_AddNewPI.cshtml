
@using System.Activities.Expressions
@using System.Web.UI.WebControls
@using Microsoft.Office.Interop.Excel
@model SSS.Property.Transactions.ViewModels.LP_PI_ViewModel
@{
    ViewBag.Title = "AddNewPI";
    Layout = "~/Views/Shared/_Layout.cshtml";

}
@{
    if (ViewBag.isReturn == 1)
    {
        <div class="card-body">
            <h3>Purchase Return</h3>
            <br />
            <form role="form" id="purchaseform">
                @Html.HiddenFor(model => model.idx, new { id = "idx", value = 0 })


                <div class="row" id="PurchaseDetails">
                    <div class="col-md-12">
                        <div class="card card-primary">
                            <div class="">

                                <table id="example2" class="table table-striped table-bordered table-condensed table-hover table-active">
                                    <thead class="thead-dark">
                                        <tr>
                                            <th style="display:none"></th>
                                            <th>Product Name</th>
                                            <th>QTY</th>
                                            @*<th>Recieved Qty</th>*@
                                            <th>Unit Price</th>
                                            <th>Sub Amount</th>
                                            <th>Return Qty</th>
                                        </tr>
                                    </thead>
                                    <tbody class="" style="background:white;">
                                        @{
                                            if (Model.InvoiceDetails != null && Model.InvoiceDetails.Count > 0)
                                            {



                                                foreach (var items in Model.InvoiceDetails)
                                                {
                                                    <tr>
                                                        <td style="display:none">@items.ItemIdx</td>
                                                        @{
                                                            string Productname = "";
                                                            for (int i = 0; i < Model.ProductList.Count; i++)
                                                            {
                                                                if (Model.ProductList[i].idx == items.ItemIdx)
                                                                {
                                                                    Productname = @Model.ProductList[i].itemName;
                                                                }
                                                            }
                                                            <td>@Productname</td>
                                                        }
                                                        @*<td>@items.Qty</td>*@
                                                        <td>@items.Qty</td>
                                                        <td>@items.UnitPrice</td>
                                                        <td>@items.TotalAmount</td>
                                                        <td><input type="text" placeholder="Enter Return Price" onkeyup="CheckForReturn(this)" value="0" id="returnQty" class="form-control" /></td>
                                                    </tr>

                                                                }
                                                            }
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                        <!-- /.card -->
                    </div>


                </div>

                <hr />
                <br />
                <div class="row">
                    <div class="col-sm-3">
                        <div class="form-group">
                            <label for="inputName">Gross Amount</label>
                            @Html.EditorFor(model => model.NetAmount, new { htmlAttributes = new { @placeholder = "Gross Amount", @class = "form-control", @readonly = true } })
                        </div>
                        @Html.ValidationMessageFor(model => model.NetAmount, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-sm-3">
                        <div class="form-group">
                            <label for="inputName">Total Amount</label>
                            @Html.EditorFor(model => model.TotalAmount, new { htmlAttributes = new { @placeholder = "Total Amount", @class = "form-control", @readonly = true } })
                        </div>
                        @Html.ValidationMessageFor(model => model.TotalAmount, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-sm-3">
                        <div class="form-group">
                            <label for="inputName">Tax Amount</label>
                            @Html.EditorFor(model => model.TaxAmount, new { htmlAttributes = new { @placeholder = "Paid Amount", @class = "form-control", @readonly = true } })
                        </div>
                        @Html.ValidationMessageFor(model => model.TaxAmount, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-sm-3">
                        <div class="form-group">
                            <label for="inputName">Balance Amount</label>
                            @Html.EditorFor(model => model.BalanceAmount, new { htmlAttributes = new { @placeholder = "Balance Amount", @class = "form-control", @readonly = true } })
                        </div>
                        @Html.ValidationMessageFor(model => model.BalanceAmount, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-sm-3">
                        <div class="form-group">
                            <label for="inputName">Paid Amount</label>
                            @Html.EditorFor(model => model.PaidAmount, new { htmlAttributes = new { @placeholder = "Paid Amount", @class = "form-control", @readOnly = "true" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.PaidAmount, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="row">
                    <div class="modal-footer">
                        @{
                            if (Model.ParentDocID > 0)
                            {
                                <button type="button" class="btn btn-success" disabled="disabled">Submit</button>
                            }
                            else
                            {
                                <button type="button" class="btn btn-success" id="btnsubmit">Submit</button>
                            }
                        }
                        <button type="button" class="btn btn-light" data-dismiss="modal">Cancel</button>
                    </div>
                </div>
            </form>

        </div>
        @section MyScripts {
            <script type="text/javascript">
                $(document).ready(function () {
                    $("#ddlTax").trigger("change");
                });
                function CheckForReturn(o) {
                    //alert(id);
                    var $row = $(this).closest("tr"),        // Finds the closest row <tr>
                         $tds = $row.find("td:nth-child(2)");
                    //console.log($tds);
                    //console.log(o.parentNode.parentNode.children[5].children[0].value);
                    var purchaseQty = o.parentNode.parentNode.children[2].innerText;
                    var returnQty = o.parentNode.parentNode.children[5].children[0].value

                    if (Number(returnQty) <= Number(purchaseQty)) {
                    }
                    else {
                        errmsg = [];
                        errmsg.push('Return QTY can not be greater than Purchase QTY')
                        displayerror();
                        o.parentNode.parentNode.children[5].children[0].value = '0';
                        return;

                    }




                };
                $("#btnsubmit").click(function (e) {
                    //console.log("here");
                    e.preventDefault();



                    var datatosend = {
                        objPI: {
                            idx: $('#idx').val(),
                            //InvoiceNo: $('#InvoiceNo').val(),
                            //ParentDocID: $('#ParentDocID').val(),
                            //TotalAmount: $('#TotalAmount').val(),
                            NetAmount: $('#NetAmount').val(),
                            //PaymentType: $('#PaymentType option:selected').val(),
                            BalanceAmount: $('#BalanceAmount').val(),
                            //Description: $('#Description').val(),
                            //VendorID: $("#VendorID").val(),
                            //Reference: $("#Reference").val(),
                            PaidAmount: $('#PaidAmount').val(),
                            //bankIdx: $('#bankIdx option:selected').val(),
                            //accorChequeNumber: $('#accorChequeNumber').val(),
                            TaxAmount: $('#TaxAmount').val(),
                            //PageList:[{ID:1},{ID:2},{ID:3}]
                            PITAXLIST: [],
                            InvoiceDetails: [],
                            UpdatedInvoiceDetails: []
                        }

                    }
                    //$("#purchaseform input:checkbox:checked").each(function () {
                    //    if ($(this).val() > 0) {

                    //        var taxpercnt = $(this).attr('data-id');
                    //        datatosend.objPI.PITAXLIST.push({
                    //            Tax_Id: $(this).val(),
                    //            TaxPercent: taxpercnt

                    //        })

                    //    }

                    //    // add $(this).val() to your array
                    //});

                    var table = $("#example2 tbody");
                    table.find('tr').each(function (i) {
                        var $tds = $(this).find('td'),
                            ItemIdx = $tds.eq(0).text(),
                            Qty = $tds.eq(2).text();
                        UnitPrice = $tds.eq(3).text(),
                        TotalAmount = Qty * UnitPrice,// $tds.eq(4).text()
                        returnQty = $tds.eq(5).find('#returnQty').val(),
                        Status = true;


                        datatosend.objPI.InvoiceDetails.push({
                            ItemIdx: $tds.eq(0).text(),
                            Qty: $tds.eq(2).text(),
                            UnitPrice: $tds.eq(3).text(),
                            TotalAmount: Qty * UnitPrice,
                            ReturnQty: returnQty,
                            ReturnAmount: returnQty * UnitPrice,
                            Status: true
                        })

                        datatosend.objPI.UpdatedInvoiceDetails.push({
                            ItemIdx: $tds.eq(0).text(),
                            Qty: Number(($tds.eq(2).text()) - Number(returnQty)),
                            UnitPrice: $tds.eq(3).text(),
                            TotalAmount: (Number(($tds.eq(2).text()) - Number(returnQty)) * Number(UnitPrice)),

                            Status: true
                        })

                    });
                    console.log(datatosend);
                    var form = $("#purchaseform");

                    // $.validator.unobtrusive.parse(form);
                    // if ($(form).valid()){
                    console.log("here1");
                    if (true) {
                        $.ajax({
                            type: "POST",
                            url: "/PInvoice/SalesReturnEntry",
                            data: JSON.stringify(datatosend),// $(form).serialize(),
                            contentType: 'application/json',
                            dataType: 'json',
                            success: function (res) {
                                console.log(res);
                                if (res.success) {

                                    window.location.href = "/PInvoice/ViewPI"
                                }
                                else if (res.success == false && res.msg == 'Failed') {

                                }
                            },
                            failure: function (res) {
                                console.log(res);
                            },
                            err: function (res) {
                                console.log(res);
                            }

                        })
                    }
                    else {
                        return false;
                    }

                });



                // Add To grid
                $("#ParentDocID").on('change', function () {
                    var ddvaue = $("#ParentDocID option:selected").val();
                    if (ddvaue > 0) {
                        GetPODataSet(ddvaue)
                        $('#btnaddtogrid').attr('disabled', false);

                    }
                    else {
                        $("#example2 tbody").empty();
                        $('#btnaddtogrid').attr('disabled', false);
                        $("#WarerHouseID")[0].selectedIndex=0;
                        $("#totalAmount").val("0");
                    }

                });






                function GetPODataSet(poid) {
                    $.ajax({
                        url: "/PInvoice/SelectGRNById",
                        data: { id: poid },
                        success: function (data) {
                            var POData = JSON.parse(data.data);
                            console.log(POData);
                            $('#VendorID').val(POData[0].vendorIdx);
                            $('#ParentDocID').val(POData[0].idx);
                            //$('#WarerHouseID').val(POData[0].WarerHouseID);
                            $("#example2 tbody").empty();
                            $('#milestones').show();
                            var markup;
                            var tamount = 0;

                            // Added By Ahsan
                            $("#ddlTax").val('1');
                            if (taxData != null) {
                                $("#ddlTax").val('1');
                                //$("#ddlTax option:selected").val()
                                RemoveCheckBox(taxlist)
                                CreateAndbindCheckBox(taxlist);//populate krdega taxes
                                var check = $('input[name="tax"]');
                                for (var i = 0 ; i < Number(taxData.length) ; i++) {

                                    var taxIdx = taxData[i].taxIdx;

                                    check.each(function () {
                                        var taxid = $(this).attr('data-id');
                                        if (taxIdx == taxid) {
                                            $(this).attr('checked', true)
                                        }
                                    });
                                }
                                console.log(check);

                            }

                            for (var i = 0; i < POData.length; i++) {
                                console.log(data[i]);
                                var productname = POData[i].itemName; //$("#itemIdx option:selected").text();
                                var ProductID = POData[i].itemIdx;// $("#itemIdx option:selected").val();
                                var OrderdQty = POData[i].qty;// $("#qty").val();
                                var recievedqty = OrderdQty - POData[i].openItem;
                                var unitprice = POData[i].unitPrice;
                                var totalamount = unitprice * recievedqty;

                                tamount = tamount + totalamount
                                $("#TotalAmount").val(tamount);
                                $("#NetAmount").val(tamount);
                                $("#BalanceAmount").val(tamount);
                                //var duedate = $("#DueDate").val();
                                markup = "<tr><td style='display:none;'>" + ProductID + "</td><td>" + productname + "</td><td>" + OrderdQty + "</td><td>" + recievedqty + "</td><td>" + unitprice + "</td><td class='tamnt'>" + totalamount + "</td></tr>";
                                //console.log(markup);

                                $("#example2 tbody").append(markup);

                            }

                            var tamount = 0;

                            $("#totalAmount").val(tamount);

                        }
                    });
                }






                var errmsg;
                //Add Project Button Event start
                $("#qty").keyup(function () {
                    var qtyval = $(this).val();
                    var unitpriceval = $("#unitPrice").val();
                    var totalamount = qtyval * unitpriceval;

                    $("#amount").val(totalamount);
                });
                $("#unitPrice").keyup(function () {
                    var unitpriceval = $(this).val();
                    var qtyval = $("#qty").val();
                    var totalamount = qtyval * unitpriceval;
                    $("#amount").val(totalamount);
                });






                //-----------------added by salman

                var taxlist;
                $(document).ready(function () {
                    taxlist=@Html.Raw(Json.Encode(ViewBag.TaxList));

                });



                $("#ddlTax").on('change', function () {
                    var ddlvalue = $("#ddlTax option:selected").val();
                    if (ddlvalue > 0) {
                        if (ddlvalue == 1) {
                            CreateAndbindCheckBox(taxlist);
                            calculation();
                        }
                        else {

                            RemoveCheckBox(taxlist);
                            calculation();
                        }

                    }


                });


                function CreateAndbindCheckBox(pagelistdata) {
                    //console.log(pagelistdata);
                    for (var i = 0; i < pagelistdata.length; i++) {
                        var divopen = '<div class="col-sm-2"><div class="form-check">';
                        var createcheckbox = '<input class="form-check-input"  onclick="calculation();" value=' + pagelistdata[i].taxPercent + ' data-Id=' + pagelistdata[i].coaIdx + ' type="checkbox" name="tax">';
                        var checkboxlabel = '<label class="form-check-label">' + pagelistdata[i].taxName + '</label>';
                        var divclose = '</div></div>';
                        var dictoappend = divopen + createcheckbox + checkboxlabel + divclose;
                        $('#checkboxdiv').append(dictoappend);
                        $('#checkboxdiv').show();

                    }


                }


                function RemoveCheckBox(pagelistdata) {
                    console.log(pagelistdata);
                    for (var i = 0; i < pagelistdata.length; i++) {
                        var divopen = '<div class="col-sm-2"><div class="form-check">';
                        var createcheckbox = '<input class="form-check-input" data-Id=' + pagelistdata[i].coaIdx + ' type="checkbox">';
                        var checkboxlabel = '<label class="form-check-label">' + pagelistdata[i].taxName + '</label>';
                        var divclose = '</div></div>';
                        //var dictoappend = divopen + createcheckbox + checkboxlabel + divclose;
                        //$('#checkboxdiv').append(dictoappend)
                        $('#checkboxdiv').empty();
                        $('#checkboxdiv').hide();
                        //$('#mydiv').empty();
                    }


                }





                $('#paidAmount').on('keyup', function () {
                    if($('#paidAmount').val()>0)
                    {

                        $('#paymenttype').show();
                    }
                    else
                    {
                        $('#paymenttype').hide();
                        $('#banks').hide();
                        $('#cheqno').hide();
                        $('#paymenttype').val('0');

                    }

                });





                //------------------------------------

                $("#btnaddtogrid").click(function (e) {
                    if (!(gridValidation($("#itemIdx option:selected").val()))) {
                        // alert("Product Alreaty Exist")
                        displayerror();
                        return;
                    }


                    // alert("hello");
                    $('#milestones').show();
                    //var closebutton = '<input type="button" value="x" id="deleterow" onclick="SomeDeleteRowFunction(this)" class="fa fa-window-close close" />';
                    //'<button type="button" class="close" style="float:left" id="deleterow" aria-label="Close">' +
                    //'<span aria-hidden="true" styel="color:red">&times;</span>' +
                    // '</button>'
                    var productname = $("#itemIdx option:selected").text();
                    var ProductID = $("#itemIdx option:selected").val();
                    var Qty = $("#qty").val();
                    var unitprice = $("#unitPrice").val();
                    var totalamount = $("#amount").val();
                    //var duedate = $("#DueDate").val();
                    var markup = "<tr><td style='display:none;'>" + ProductID + "</td><td>" + productname + "</td><td>" + Qty + "</td><td>" + Qty + "</td><td>" + unitprice + "</td><td class='tamnt'>" + totalamount + "</td></tr>";//<td>" + closebutton + "</td></tr>";
                    //if (milestone == "") {
                    //    alert("Enter milestone");
                    //    return;
                    //} else {

                    $("#example2 tbody").append(markup);
                    var tamount = 0;
                    //var labourcost = $("#tax").val();
                    //var transportcost = $("#taxAount").val();
                    var tamount = parseFloat($("#totalAmount").val());
                    tamount = parseFloat(tamount) + parseFloat(totalamount);//+ parseFloat(labourcost) + parseFloat(transportcost);
                    $("#totalAmount").val(tamount);



                });
                $('#purchaseDate').change(function () {
                    var date = $(this).val();
                    console.log(date, 'change')
                    var GivenDate = date;
                    var CurrentDate = new Date();
                    GivenDate = new Date(GivenDate);

                    if (GivenDate > CurrentDate) {
                        alert('Given date is greater than the current date.');
                        var today = moment().format('YYYY-MM-DD');
                        $('#purchaseDate').val(today);
                    } else {
                        // alert('Given date is not greater than the current date.');
                    }
                });
                function SomeDeleteRowFunction(o) {
                    //alert(id);
                    var $row = $(this).closest("tr"),        // Finds the closest row <tr>
                         $tds = $row.find("td:nth-child(2)");
                    //console.log($tds);

                    $.each($tds, function () {                // Visits every single <td> element
                        // console.log($(this).text());         // Prints out the text within the <td>
                    });
                    var itmmant = o.parentNode.parentNode.children[4].innerText;
                    var tmnt = $('#totalAmount').val();

                    tmnt = tmnt - itmmant;
                    $('#totalAmount').val(tmnt);

                    // $('#balanceAmount').val(tmnt);
                    var p = o.parentNode.parentNode;

                    p.parentNode.removeChild(p);
                    $(this).closest('tr').remove();


                };

                function changeinunitprice(o) {
                    //alert(id);
                    var $row = $(this).closest("tr"),        // Finds the closest row <tr>
                         $tds = $row.find("td:nth-child(2)");
                    //console.log($tds);


                    var itmqty = o.parentNode.parentNode.children[2].innerText;

                    var itmup = o.parentNode.parentNode.children[3].children[0].value;

                    itmqty = Number(itmqty);
                    itmup = Number(itmup);

                    var tmnt = $('.tamnt').val()
                    tmnt = Number(itmqty) * Number(itmup);

                    $('.tamnt').val(tmnt);
                    var totalamnt = o.parentNode.parentNode.children[4].innerText = (parseFloat(itmqty) * parseFloat(itmup));

                    var tmnt = $('#totalAmount').val();
                    tmnt = Number(tmnt) + (Number(itmqty) * Number(itmup))
                    $('#totalAmount').val(tmnt)
                    //alert(tmnt);



                };

                function gridValidation(Id) {
                    errmsg = [];
                    var myTab = $("#example2 tbody");
                    var rtrn = true;

                    // LOOP THROUGH EACH ROW OF THE TABLE AFTER HEADER.
                    myTab.find('tr').each(function (i) {
                        var $tds = $(this).find('td'),
                            productid = $tds.eq(0).text();

                        if (Id == productid) {
                            rtrn = false;
                            errmsg.push("Product Already exist");
                        }
                    })
                    if ($('#itemIdx option:selected').val() == '') {
                        rtrn = false;
                        errmsg.push("Select Product");
                    }
                    if ($('#qty').val() <= 0) {
                        rtrn = false;
                        errmsg.push("Qty value is zero");
                    }
                    if ($('#unitPrice').val() <= 0) {
                        rtrn = false;
                        errmsg.push("unit value is zero");
                    }
                    //if ($('#DueDate').val() < 0) {
                    //    rtrn = false;
                    //    errmsg.push("DUE date is Invalid");
                    //}
                    //var dat = $('#DueDate').val()
                    //console.log(moment((new Date())).format("DD-MM-YYYY"));
                    //var today = moment((new Date())).format("DD-MM-YYYY");
                    //var slctddte = moment(dat).format("DD-MM-YYYY");

                    //if ((new Date($('#DueDate').val())) == 'Invalid Date') {
                    //    rtrn = false;
                    //    errmsg.push("DUE date is invalid ");
                    //    // alert(errorarray.length);
                    //}
                    //if (slctddte < today) {
                    //    rtrn = false;
                    //    errmsg.push("DUE date is INVALID /Should be greater than current date");
                    //    // alert(errorarray.length);
                    //}
                    return rtrn;
                }

                function displayerror() {
                    for (var i = 0; i < errmsg.length; i++) {
                        toastr.options = {
                            "closeButton": false,
                            "debug": false,
                            "newestOnTop": false,
                            "progressBar": false,
                            "positionClass": "toast-top-center",
                            "preventDuplicates": false,
                            "onclick": null,
                            "showDuration": "300",
                            "hideDuration": "1000",
                            "timeOut": "5000",
                            "extendedTimeOut": "1000",
                            "showEasing": "swing",
                            "hideEasing": "linear",
                            "showMethod": "fadeIn",
                            "hideMethod": "fadeOut"
                        }
                        Command: toastr["error"](errmsg[i], "")
                    }
                }
                $("#calcfinal").click(function () {
                    calculate();

                });
                function percentage(num, per) {
                    console.log(num)
                    var totalpercntage = (num / 100) * per;
                    // console.log(totalpercntage)
                    return totalpercntage
                }
                function calculate() {

                    $('#TotalAmount').val($('#NetAmount').val());
                    var count = 0;
                    // alert("d")
                    var totaltaxAmount = Number(0);
                    $("#purchaseform input:checkbox:checked").each(function () {
                        // alert($(this).val())

                        if (($(this).val()) > 0) {

                            var taxpercent = $(this).attr('data-id');

                            var NetAmount = $('#NetAmount').val();
                            var currentAmount = (Number(NetAmount) / Number(100)) * Number(taxpercent)
                            totaltaxAmount = parseFloat(Number(currentAmount) + Number(totaltaxAmount)).toFixed(2)
                            //var NetAmntTaxValue = percentage(NetAmount, taxpercent);
                            //var totalamount = parseFloat($('#TotalAmount').val()) + parseFloat(NetAmntTaxValue);
                            //$('#TotalAmount').val(totalamount.toFixed(2));
                            //$('#TaxAmount').val(parseFloat($('#TaxAmount').val()) + parseFloat(NetAmntTaxValue));
                            count++;
                        }


                        // add $(this).val() to your array
                    });
                    $('#TaxAmount').val(totaltaxAmount);
                    $('#TotalAmount').val(Number(totaltaxAmount) + Number($('#NetAmount').val()));
                    $('#BalanceAmount').val($('#TotalAmount').val());
                    if (count <= 0) {
                        $('#TaxAmount').val('0.00');
                        $('#TotalAmount').val($('#NetAmount').val());
                    }
                }

                $('#PaymentType').on('change', function () {
                    if ($('#PaymentType option:selected').val() == 0) {
                        $('#paymntmethodoptions').hide();
                        // $('#divTxtPaid').hide();
                        $('#PaidAmount').val('0.00');
                    }
                    if ($('#PaymentType option:selected').val() == 1) {
                        $('#paymntmethodoptions').hide();
                        //  $('#divTxtPaid').show();
                    }
                    if ($('#PaymentType option:selected').val() == 2) {
                        $('#paymntmethodoptions').show();
                        $('#cheqno').hide();
                        //  $('#divTxtPaid').show();
                    }

                    if ($('#PaymentType option:selected').val() == 3) {
                        $('#paymntmethodoptions').show();
                        $('#cheqno').show();
                        //   $('#divTxtPaid').show();
                    }
                });
                if ($('#PaymentType').val() == 0) {
                    $('#divTxtPaid').hide();
                    // $('#paidAmount').val('0.00');
                }
                $('#PaidAmount').keyup(function () {
                    //var paidAmount = Number($('#PaidAmount').val());
                    //var balanceAmount = Number($('#BalanceAmount').val());
                    //var netAmount = Number($('#NetAmount').val());
                    //if (paidAmount > 0) {
                    //    balanceAmount = balanceAmount - paidAmount;
                    //    $('#BalanceAmount').val(balanceAmount)
                    //}
                    //else if (paidAmount > balanceAmount) {
                    //    $('#BalanceAmount').val(netAmount);
                    //    alert("Paid Amount Cannot Be Greater Than Balance Amount");
                    //}
                    //else {
                    //    $('#BalanceAmount').val(netAmount);
                    //    alert("Please Enter a Valid Number");
                    //}

                    var paidAmount = Number($('#PaidAmount').val());
                    var balanceAmount = Number($('#BalanceAmount').val());
                    var totalAmount = Number($('#TotalAmount').val());
                    if (paidAmount > 0) {
                        if (paidAmount > totalAmount) {
                            $('#BalanceAmount').val(totalAmount);
                            $('#PaidAmount').val('0');
                            alert("Paid Amount Cannot Be Greater Than Balance Amount");
                        }
                        else {
                            var remaingAmount = totalAmount - paidAmount;
                            $('#BalanceAmount').val(remaingAmount)
                        }

                    }

                    else {
                        $('#BalanceAmount').val(totalAmount);
                        alert("Please Enter a Valid Number");
                    }
                });
            </script>
        }
                            }
                            else
                            {
                                <div class="card-body">
                                    <h3>Purchase Invoice</h3>
                                    <br />
                                    <form role="form" id="purchaseform">
                                        @Html.HiddenFor(model => model.idx, new { id = "idx", value = 0 })

                                        <div class="row">
                                            <div class="col-sm-3">
                                                <!-- text input -->
                                                <div class="form-group">
                                                    <label>Select GRN:</label>
                                                    @*@Html.DropDownListFor(model => model.ParentDocID, new SelectList(Model.POLIST, "idx", "PoNumber"), "Select PO", new { @Class = "form-control font-weight-bold" })*@
                                                    @Html.DropDownListFor(model => model.ParentDocID, new SelectList(Model.POLIST, "GRNMasterID", "Doc_No"), "Select GRN", new { @Class = "form-control font-weight-bold" })
                                                </div>
                                                @Html.ValidationMessageFor(model => model.ParentDocID, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="col-sm-3">
                                                <!-- text input -->
                                                <div class="form-group">
                                                    <label>Select Vendor:</label>
                                                    @Html.DropDownListFor(model => model.VendorID, new SelectList(Model.VendorList, "idx", "vendorName"), "Select Vendor", new { @Class = "form-control font-weight-bold" })
                                                </div>
                                                @Html.ValidationMessageFor(model => model.VendorID, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="col-sm-3">
                                                <!-- text input -->
                                                <div class="form-group">
                                                    <label>PI#*:</label>
                                                    @Html.EditorFor(model => model.InvoiceNo, new { htmlAttributes = new { @placeholder = "PO Number*:", @class = "form-control", @readonly = true } })
                                                    @*<input type="text" class="form-control" placeholder="@ViewBag.CustomerCode" disabled>*@
                                                </div>
                                                @Html.ValidationMessageFor(model => model.InvoiceNo, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="col-sm-3">
                                                <!-- text input -->
                                                <div class="form-group">
                                                    <label>Date*:</label>
                                                    @Html.EditorFor(model => model.CreatedDate, new { htmlAttributes = new { @placeholder = "Purchase Date*:", @class = "form-control" } })
                                                    @*<input type="text" class="form-control" placeholder="@ViewBag.CustomerCode" disabled>*@
                                                </div>
                                                @Html.ValidationMessageFor(model => model.CreatedDate, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-sm-3">
                                                <!-- text input -->
                                                <div class="form-group">
                                                    <label>Reference:</label>
                                                    @Html.EditorFor(model => model.Reference, new { htmlAttributes = new { @placeholder = "Reference", @class = "form-control" } })
                                                    @*<input type="text" class="form-control" placeholder="@ViewBag.CustomerCode" disabled>*@
                                                </div>
                                                @Html.ValidationMessageFor(model => model.Reference, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="col-sm-3">
                                                <!-- text input -->
                                                <div class="form-group">
                                                    <label>Select WareHouse*:</label>
                                                    @Html.DropDownListFor(model => model.WarerHouseID, new SelectList(Model.WareHouseList, "idx", "WareHouseName"), "Select WareHouse", new { @Class = "form-control font-weight-bold" })
                                                </div>
                                                @Html.ValidationMessageFor(model => model.WarerHouseID, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <hr />
                                        <div class="row" id="PurchaseDetails">
                                            <div class="col-md-12">
                                                <div class="card card-primary">
                                                    <div class="card-header" style="background-color:black;color:white">
                                                        <h5>Add Product</h5>
                                                        <div class="card-tools">
                                                        </div>
                                                    </div>
                                                    <div class="">
                                                        <table class="table table-striped table-bordered table-condensed table-hover table-active">
                                                            <tbody class="" style="background:white;">
                                                                <tr>
                                                                    <td>@Html.DropDownListFor(model => model.itemIdx, new SelectList(Model.ProductList, "idx", "itemName"), "Select Product", new { @Class = "form-control font-weight-bold" })</td>
                                                                    <td>@Html.EditorFor(model => model.stock, new { htmlAttributes = new { @placeholder = "Stock", @value = "hello", @class = "form-control", @readonly = "true" } })</td>
                                                                    <td>@Html.EditorFor(model => model.costPrice, new { htmlAttributes = new { @placeholder = "Cost Price", @class = "form-control", @readonly = "true" } })</td>
                                                                    <td>@Html.EditorFor(model => model.qty, new { htmlAttributes = new { @placeholder = "Qty", @class = "form-control" } })</td>
                                                                    <td>@Html.EditorFor(model => model.unitPrice, new { htmlAttributes = new { @placeholder = "Unit Price", @class = "form-control" } })</td>
                                                                    <td>@Html.EditorFor(model => model.amount, new { htmlAttributes = new { @placeholder = "Total Price", @class = "form-control", @readonly = true } })</td>
                                                                    <td>
                                                                        @{
                                                                            if (Model.ParentDocID < 0)
                                                                            {
                                                                                <input type="button" value="+" disabled="disabled" id="" class="btn btn-outline-primary" style="font-size: 20px " />

                                                                            }
                                                                            else
                                                                            {
                                                                                <input type="button" value="+" id="btnaddtogrid" class="btn btn-outline-primary" style="font-size: 20px " />

                                                                            }
                                                                        }
                                                                    </td>
                                                                </tr>
                                                            </tbody>
                                                        </table>

                                                        <table id="example2" class="table table-striped table-bordered table-condensed table-hover table-active">
                                                            <thead class="thead-dark">
                                                                <tr>
                                                                    <th style="display:none"></th>
                                                                    <th>Product Name</th>
                                                                    <th>Ordered QTY</th>
                                                                    <th>Recieved Qty</th>
                                                                    <th>Unit Price</th>
                                                                    <th>Sub Amount</th>
                                                                    <th>Actions</th>
                                                                </tr>
                                                            </thead>
                                                            <tbody class="" style="background:white;">
                                                                @{
                                                                    if (Model.InvoiceDetails != null && Model.InvoiceDetails.Count > 0)
                                                                    {



                                                                        foreach (var items in Model.InvoiceDetails)
                                                                        {
                                                                            <tr>
                                                                                <td style="display:none">@items.ItemIdx</td>
                                                                                @{
                                                                                    string Productname = "";
                                                                                    for (int i = 0; i < Model.ProductList.Count; i++)
                                                                                    {
                                                                                        if (Model.ProductList[i].idx == items.ItemIdx)
                                                                                        {
                                                                                            Productname = @Model.ProductList[i].itemName;
                                                                                        }
                                                                                    }
                                                                                    <td>@Productname</td>
                                                                                }
                                                                                <td>@items.Qty</td>
                                                                                <td>@items.Qty</td>
                                                                                <td>@items.UnitPrice</td>
                                                                                <td>@items.TotalAmount</td>
                                                                                <td><button id="deleterow" onclick="SomeDeleteRowFunction(this)" class="close btn btn-outline-danger"><i class="fa fa-trash menu-icon"></i></button></td>
                                                                            </tr>

                                                                                        }
                                                                                    }
                                                                }
                                                            </tbody>
                                                        </table>
                                                    </div>
                                                </div>
                                                <!-- /.card -->
                                            </div>


                                        </div>

                                        <hr />
                                        <div class="row">
                                            <div class="col-sm-12">
                                                <div class="form-group ">
                                                    <label for="inputName">Taxes</label>
                                                    <select class="col-12 form-control" id="ddlTax">
                                                        <option value="0">Select Taxes</option>
                                                        <option value="1">With Taxes</option>
                                                        <option value="2">Without Taxes</option>
                                                    </select>
                                                </div>
                                            </div>
                                        </div>

                                        <div id="checkboxdiv" style=" @{ var Flag = Model.PITAXLIST.Count > 0 ? "display:block" : "display:none"; } " class="row form-control-lg">
                                            @{
                                                if (Model.PITAXLIST != null)
                                                {

                                                    foreach (var taxes in Model.TaxesList)
                                                    {


                                                        <div class="col-sm-2">
                                                            <div class="form-check">
                                                                @{
                                                                    bool flag = false;
                                                                    for (int i = 0; i < Model.PITAXLIST.Count; i++)
                                                                    {

                                                                        if (Model.PITAXLIST[i].Tax_Id == taxes.idx)
                                                                        {
                                                                            flag = true;
                                                                        }



                                                                    }
                                                                    <input class="form-check-input" checked=@flag data-id="@taxes.taxPercent" onclick="calculate();" value="@taxes.idx" type="checkbox">
                                                                    <label class="form-check-label">@taxes.taxName (@taxes.taxPercent) %</label>
                                                                }
                                                            </div>
                                                        </div>
                                                                        }

                                                                    }
                                                                    else
                                                                    {
                                                                        foreach (var taxes in Model.TaxesList)
                                                                        {


                                                                            <div class="col-sm-2">
                                                                                <div class="form-check">
                                                                                    <input class="form-check-input" data-id="@taxes.taxPercent" onclick="calculate();" value="@taxes.idx" type="checkbox">
                                                                                    <label class="form-check-label">@taxes.taxName (@taxes.taxPercent) %</label>
                                                                                </div>
                                                                            </div>
                                                                        }
                                                                    }
                                            }
                                        </div>
                                        <br />
                                        <div class="row">
                                            <div class="col-sm-12">
                                                <div class="form-group">
                                                    <label for="inputName">Description</label>
                                                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @placeholder = "Description", @class = "form-control" } })
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-sm-3">
                                                <div class="form-group">
                                                    <label for="inputName">Gross Amount</label>
                                                    @Html.EditorFor(model => model.NetAmount, new { htmlAttributes = new { @placeholder = "Gross Amount", @class = "form-control", @readonly = true } })
                                                </div>
                                                @Html.ValidationMessageFor(model => model.NetAmount, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="col-sm-3">
                                                <div class="form-group">
                                                    <label for="inputName">Total Amount</label>
                                                    @Html.EditorFor(model => model.TotalAmount, new { htmlAttributes = new { @placeholder = "Total Amount", @class = "form-control", @readonly = true } })
                                                </div>
                                                @Html.ValidationMessageFor(model => model.TotalAmount, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="col-sm-3">
                                                <div class="form-group">
                                                    <label for="inputName">Tax Amount</label>
                                                    @Html.EditorFor(model => model.TaxAmount, new { htmlAttributes = new { @placeholder = "Paid Amount", @class = "form-control", @readonly = true } })
                                                </div>
                                                @Html.ValidationMessageFor(model => model.TaxAmount, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="col-sm-3">
                                                <div class="form-group">
                                                    <label for="inputName">Balance Amount</label>
                                                    @Html.EditorFor(model => model.BalanceAmount, new { htmlAttributes = new { @placeholder = "Balance Amount", @class = "form-control", @readonly = true } })
                                                </div>
                                                @Html.ValidationMessageFor(model => model.BalanceAmount, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="col-sm-3">
                                                <div class="form-group" id="divTxtPaid">
                                                    <label for="inputName">Paid Amount</label>
                                                    @Html.EditorFor(model => model.PaidAmount, new { htmlAttributes = new { @placeholder = "Paid Amount", @class = "form-control" } })
                                                </div>
                                                @Html.ValidationMessageFor(model => model.PaidAmount, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-sm-3">
                                                <div class="form-group" id="PaymentType">
                                                    @*<label for="inputName">Payment Method</label>
                                                        @Html.DropDownListFor(model => model.PaymentType,
                                                         new List<SelectListItem> {
                                                         new SelectListItem { Value = "0" , Text = "Select Payment Mode " },
                                                         new SelectListItem { Value = "1" , Text = "Cash" },
                                                         new SelectListItem { Value = "2" , Text = "Bank " },
                                                         new SelectListItem { Value = "3" , Text = "Cheque" },
                                                                                                            }
                                                          , new { @Class = "form-control font-weight-bold" })*@

                                                    <label for="inputName">Payment Method</label>
                                                    <select id="paymenttype" class="form-control">
                                                        <option value="0">Select Payment Mode</option>
                                                        <option value="1">Cash</option>
                                                        <option value="3">Bank</option>
                                                        <option value="2">Cheque</option>
                                                        @*<option value="4">Customer Payment</option>*@
                                                    </select>

                                                </div>
                                            </div>
                                        </div>
                                        <div class="row" id="paymntmethodoptions" style="display:none;">

                                            <div class="col-sm-4" id="banks">
                                                <div class="form-group">
                                                    <label for="inputName">Bank</label>
                                                    @Html.DropDownListFor(model => model.bankIdx, new SelectList(Model.BankList, "idx", "accountTitle"), "Select Bank", new { @Class = "form-control font-weight-bold" })
                                                </div>
                                            </div>
                                            <div class="col-sm-3" id="cheqno">
                                                <div class="form-group">
                                                    <label for="inputName">Cheque</label>
                                                    @Html.EditorFor(model => model.accorChequeNumber, new { htmlAttributes = new { @placeholder = "Acc /Cheque", @class = "form-control" } })
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="modal-footer">
                                                @{
                                                    if (Model.ParentDocID < 0)
                                                    {
                                                        <button type="button" class="btn btn-success" disabled="disabled">Submit</button>
                                                    }
                                                    else
                                                    {
                                                        <button type="button" class="btn btn-success" id="btnsubmit">Submit</button>
                                                    }
                                                }
                                                <button type="button" class="btn btn-light" data-dismiss="modal">Cancel</button>
                                            </div>
                                        </div>
                                    </form>

                                </div>
                                @section MyScripts {
                                    <script type="text/javascript">
                                        //Added By Ahsan
                                        function calculation() {
                                            var tmnt = $('#TotalAmount').val('0');
                                            var table = $("#example2 tbody");
                                            var calculateNetAmount = 0;
                                            var totalTaxAmount = 0;
                                            var tamnt = $('#NetAmount').val('0');
                                            var grossAmountinInvoice = Number('0');
                                            table.find('tr').each(function (i) {
                                                var $tds = $(this).find('td'),
                                                  itemamount = $tds.eq(5).text();

                                                //console.log(itemamount);
                                                // itemamount = itemamount + itemamount;


                                                tamnt = Number(tamnt) + (Number(itemamount))
                                                grossAmountinInvoice = Number(grossAmountinInvoice) + (Number(itemamount))

                                            });
                                            $('#NetAmount').val(grossAmountinInvoice);//Gross Amount Filled
                                            $('#TotalAmount').val(grossAmountinInvoice);
                                            var result = $('input[name="tax"]:checked');

                                            if (result.length > 0) {
                                                result.each(function () {
                                                    var amount = parseFloat(parseFloat(calculateNetAmount).toFixed(2));
                                                    var currentPercentage = $(this).val();
                                                    //alert(currentPercentage)
                                                    var currentAmountOnCheckBox = (Number(grossAmountinInvoice) / Number(100)) * Number(currentPercentage);
                                                    totalTaxAmount = parseFloat(Number(currentAmountOnCheckBox) + Number(totalTaxAmount)).toFixed(2);
                                                    //alert(currentAmountOnCheckBox);
                                                    calculateNetAmount = parseFloat(parseFloat(amount) + parseFloat(currentAmountOnCheckBox)).toFixed(2);
                                                    //alert(calculateNetAmount);
                                                });
                                                //console.log(calculateNetAmount);
                                                console.log(totalTaxAmount);

                                                $('#TotalAmount').val(Number(grossAmountinInvoice) + Number(totalTaxAmount));
                                                $('#TaxAmount').val(totalTaxAmount);
                                            }
                                            else {
                                                $('#TaxAmount').val('0');
                                            }

                                            var totalAmount = $('#TotalAmount').val();

                                            $('#TotalAmount').val(Number($('#TotalAmount').val()));
                                            var paidAmount = $('#PaidAmount').val();
                                            $('#BalanceAmount').val($('#TotalAmount').val());
                                            var balanceAmount = $('#BalanceAmount').val();
                                            if (Number(paidAmount) > 0 && Number(paidAmount) <= Number(balanceAmount)) {
                                                var blnceamt = Number(balanceAmount) - Number(paidAmount);
                                                $('#BalanceAmount').val(blnceamt);
                                                $('#PaidAmount').val(paidAmount);
                                            }
                                            else {
                                                $('#PaidAmount').val('0');
                                                $('#BalanceAmount').val(balanceAmount);
                                                //$('#PaymentType').hide();//.....
                                            }
                                        }
                                        //Added By Arsalan For Submition Validations on 07-07-21
                                        function onSubmitValdaitions()
                                        {
                                            var result =true;
                                            var paidAmount = $("#PaidAmount").val();
                                            var paymentType = $("#paymenttype").val();
                                            var bankIdx = $("#bankIdx").val();
                                            var WarerHouseID = $("#WarerHouseID").val();
                                            var chequeNumber = $("#accorChequeNumber").val();
                                            var rowsCount = Number($('#example2 tr').length)-1;
                                            if(Number(paidAmount)>0)
                                            {   
                                                if(Number(paymentType)>0)
                                                {
                                                    if(Number(paymentType)==1)
                                                    {
                                                        result= true;
                                                    }
                                                    else if(Number(paymentType)==2)
                                                    {
                                                        if(Number(bankIdx)>0 && chequeNumber!='')
                                                        {
                                                            result=true;
                                                        }
                                                        else
                                                        {
                                                            result=false;
                                                        }
                                                    }
                                                    else if(Number(paymentType)==3)
                                                    {
                                                        if(Number(bankIdx)>0)
                                                        {
                                                            result=true;
                                                        }
                                                        else
                                                        {
                                                            result=false;
                                                        }
                                                    }
                                                    if (Number(WarerHouseID)<0 && Number(rowsCount)<=0)
                                                    {
                                                        result =false;
                                                    }
                                                    else
                                                    {
                                                        result=true;
                                                    }
                                                }
                                                else
                                                {
                                                    result=false;
                                                }
                                            }
                                            return result;
                                        }
                                        $("#btnaddtogrid").click(function (e) {
                                            if (!(gridValidation($("#itemIdx option:selected").val()))) {
                                                // alert("Product Alreaty Exist")
                                                displayerror();


                                            }

                                            //alert("hello");
                                            $('#milestones').show();
                                            var closebutton = '<input type="button" value="x" id="deleterow" onclick="SomeDeleteRowFunction(this)" class="fa fa-window-close close" />';
                                            //'<button type="button" class="close" style="float:left" id="deleterow" aria-label="Close">' +
                                            //'<span aria-hidden="true" styel="color:red">&times;</span>' +
                                            // '</button>'
                                            var productname = $("#itemIdx option:selected").text();
                                            var ProductID = $("#itemIdx option:selected").val();
                                            var Qty = $("#qty").val();
                                            var unitprice = $("#unitPrice").val();
                                            var totalamount = $("#amount").val();
                                            //var duedate = $("#DueDate").val();
                                            var markup = "<tr><td style='display:none;'>" + ProductID + "</td><td>" + productname + "</td><td>" + Qty + "</td><td>" + Qty + "</td><td>" + unitprice + "</td><td class='tamnt'>" + totalamount + "</td><td>" + closebutton + "</td></tr>";//<td>" + closebutton + "</td></tr>";

                                            $("#example2 tbody").append(markup);
                                            var tamount = 0;
                                            //var labourcost = $("#tax").val();
                                            //var transportcost = $("#taxAount").val();
                                            var tamount = parseFloat($('#TotalAmount').val());
                                            tamount = parseFloat(tamount) + parseFloat(totalamount);//+ parseFloat(labourcost) + parseFloat(transportcost);
                                            $("#TotalAmount").val(tamount);
                                            $("#NetAmount").val(tamount);

                                            calculation();

                                            var balance = tamount - $('#PaidAmount').val();
                                            $("#BalanceAmount").val(balance);


                                        });

                                        $('#CreatedDate').change(function () {
                                            var date = $(this).val();
                                            console.log(date, 'change')
                                            var GivenDate = date;
                                            var CurrentDate = new Date();
                                            GivenDate = new Date(GivenDate);

                                            if (GivenDate > CurrentDate) {
                                                alert('Given date is greater than the current date.');
                                                var today = moment().format('YYYY-MM-DD');
                                                $('#CreatedDate').val(today);
                                            } else {
                                                // alert('Given date is not greater than the current date.');
                                            }
                                        });

                                        $("#btnsubmit").click(function (e) {
                                            //console.log("here");
                                            e.preventDefault();
                                            var result=onSubmitValdaitions();//Added By Arsalan Validations
                                            if(result)
                                            {
                                                var datatosend = {
                                                    objPI: {
                                                        idx: $('#idx').val(),
                                                        InvoiceNo: $('#InvoiceNo').val(),
                                                        ParentDocID: $('#ParentDocID').val(),
                                                        TotalAmount: $('#TotalAmount').val(),
                                                        NetAmount: $('#NetAmount').val(),
                                                        PaymentType: $('#PaymentType option:selected').val(),
                                                        BalanceAmount: $('#BalanceAmount').val(),
                                                        Description: $('#Description').val(),
                                                        VendorID: $("#VendorID").val(),
                                                        Reference: $("#Reference").val(),
                                                        PaidAmount: $('#PaidAmount').val(),
                                                        bankIdx: $('#bankIdx option:selected').val(),
                                                        accorChequeNumber: $('#accorChequeNumber').val(),
                                                        TaxAmount: $('#TaxAmount').val(),
                                                        WarerHouseID :$('#WarerHouseID option:selected').val(),
                                                        //PageList:[{ID:1},{ID:2},{ID:3}]
                                                        PITAXLIST: [],
                                                        InvoiceDetails: []
                                                    }

                                                }
                                                $("#purchaseform input:checkbox:checked").each(function () {
                                                    if ($(this).val() > 0) {

                                                        //var taxpercnt = $(this).attr('data-id'); backend p percent chaye mjhe
                                                        var taxIdx = $(this).attr('data-id');
                                                        datatosend.objPI.PITAXLIST.push({
                                                            Tax_Id: taxIdx,
                                                            TaxPercent: $(this).val()

                                                        })

                                                    }

                                                    // add $(this).val() to your array
                                                });

                                                var table = $("#example2 tbody");
                                                table.find('tr').each(function (i) {
                                                    var $tds = $(this).find('td'),
                                                        ItemIdx = $tds.eq(0).text(),
                                                        Qty = $tds.eq(3).text();
                                                    UnitPrice = $tds.eq(4).text(),
                                                    TotalAmount = Qty * UnitPrice,// $tds.eq(4).text(),
                                                    Status = true
                                                    ;

                                                    datatosend.objPI.InvoiceDetails.push({
                                                        ItemIdx: $tds.eq(0).text(),
                                                        Qty: $tds.eq(3).text(),
                                                        UnitPrice: $tds.eq(4).text(),
                                                        TotalAmount: Qty * UnitPrice,
                                                        Status: true
                                                    })


                                                });
                                                console.log(datatosend);
                                                var form = $("#purchaseform");

                                                // $.validator.unobtrusive.parse(form);
                                                // if ($(form).valid()){
                                                console.log("here1");
                                                if (true) {
                                                    $.ajax({
                                                        type: "POST",
                                                        url: "/PInvoice/AddUpdate",
                                                        data: JSON.stringify(datatosend),// $(form).serialize(),
                                                        contentType: 'application/json',
                                                        dataType: 'json',
                                                        success: function (res) {
                                                            console.log(res);
                                                            if (res.success) {
                                                                //Command: toastr["success"]("", "Added Successfuly")

                                                                //toastr.options = {
                                                                //    "closeButton": false,
                                                                //    "debug": false,
                                                                //    "newestOnTop": false,
                                                                //    "progressBar": true,
                                                                //    "positionClass": "toast-top-center",
                                                                //    "preventDuplicates": false,
                                                                //    "onclick": null,
                                                                //    "showDuration": "300",
                                                                //    "hideDuration": "1000",
                                                                //    "timeOut": "5000",
                                                                //    "extendedTimeOut": "1000",
                                                                //    "showEasing": "swing",
                                                                //    "hideEasing": "linear",
                                                                //    "showMethod": "fadeIn",
                                                                //    "hideMethod": "fadeOut"
                                                                //}
                                                                window.location.href = "/PInvoice/ViewPI"
                                                            }
                                                            else if (res.success == false && res.msg == 'Failed') {
                                                                //    Command: toastr["error"]("Invalid ", " Failed")

                                                                //toastr.options = {
                                                                //    "closeButton": false,
                                                                //    "debug": false,
                                                                //    "newestOnTop": false,
                                                                //    "progressBar": true,
                                                                //    "positionClass": "toast-top-center",
                                                                //    "preventDuplicates": false,
                                                                //    "onclick": null,
                                                                //    "showDuration": "300",
                                                                //    "hideDuration": "1000",
                                                                //    "timeOut": "5000",
                                                                //    "extendedTimeOut": "1000",
                                                                //    "showEasing": "swing",
                                                                //    "hideEasing": "linear",
                                                                //    "showMethod": "fadeIn",
                                                                //    "hideMethod": "fadeOut"
                                                                //}
                                                            }
                                                        },
                                                        failure: function (res) {
                                                            console.log(res);
                                                        },
                                                        err: function (res) {
                                                            console.log(res);
                                                        }

                                                    })
                                                }
                                                else {
                                                    return false;
                                                }
                                            }
                                            else
                                            {
                                                return false;
                                            }
                                           

                                        });
                                        // Add To grid
                                        $("#ParentDocID").on('change', function () {
                                            var ddvaue = $("#ParentDocID option:selected").val();
                                            if (ddvaue > 0) {
                                                GetPODataSet(ddvaue)
                                                $('#btnaddtogrid').attr('disabled', true);
                                            }
                                            else {
                                                $("#example2 tbody").empty();
                                                $('#btnaddtogrid').attr('disabled', false);
                                                $("#WarerHouseID")[0].selectedIndex=0;
                                                $("#totalAmount").val("0");
                                            }

                                        });

                                        function GetPODataSet(poid) {
                                            $.ajax({
                                                url: "/PInvoice/SelectGRNById",
                                                data: { id: poid },
                                                success: function (data) {
                                                    var POData = JSON.parse(data.data);
                                                    console.log(POData);
                                                    // alert("Done");
                                                    $('#VendorID').val(POData[0].vendorIdx);
                                                    $('#ParentDocID').val(POData[0].ID);
                                                    $('#WarerHouseID').val(POData[0].WarerHouseID);
                                                    $("#example2 tbody").empty();
                                                    $('#milestones').show();
                                                    var markup;
                                                    var tamount = 0;
                                                    for (var i = 0; i < POData.length; i++) {

                                                        console.log(POData[i]);
                                                        var productname = POData[i].itemName; //$("#itemIdx option:selected").text();
                                                        var ProductID = POData[i].itemIdx;// $("#itemIdx option:selected").val();
                                                        var OrderdQty = POData[i].qty;// $("#qty").val();
                                                        //var recievedqty = OrderdQty - POData[i].openItem;
                                                        //var recievedqty = OrderdQty;
                                                        var recievedqty = POData[i].Quantity;
                                                        var unitprice = POData[i].Rate;
                                                        var totalamount = unitprice * recievedqty;

                                                        tamount = tamount + totalamount
                                                        $("#TotalAmount").val(tamount);
                                                        $("#NetAmount").val(tamount);
                                                        $("#BalanceAmount").val(tamount);
                                                        //var duedate = $("#DueDate").val();
                                                        markup = "<tr><td style='display:none;'>" + ProductID + "</td><td>" + productname + "</td><td>" + OrderdQty + "</td><td>" + recievedqty + "</td><td>" + unitprice + "</td><td class='tamnt'>" + totalamount + "</td></tr>";
                                                        //console.log(markup);

                                                        $("#example2 tbody").append(markup);

                                                    }

                                                    var tamount = 0;

                                                    $("#totalAmount").val(tamount);

                                                }
                                            });
                                        }
                                        var errmsg;
                                        //Add Project Button Event start
                                        $("#qty").keyup(function () {
                                            var qtyval = $(this).val();
                                            var unitpriceval = $("#unitPrice").val();
                                            var totalamount = qtyval * unitpriceval;

                                            $("#amount").val(totalamount);
                                        });
                                        $("#unitPrice").keyup(function () {
                                            var unitpriceval = $(this).val();
                                            var qtyval = $("#qty").val();
                                            var totalamount = qtyval * unitpriceval;
                                            $("#amount").val(totalamount);
                                        });

                                        //-----------------added by salman


                                        var taxlist;
                                        $(document).ready(function () {
                                            taxlist=@Html.Raw(Json.Encode(ViewBag.PITAXLIST));
                                            RemoveCheckBox(taxlist);
                                            calculation();

                                        });



                                        $("#ddlTax").on('change', function () {
                                            var ddlvalue = $("#ddlTax option:selected").val();
                                            if (ddlvalue > 0) {
                                                if (ddlvalue == 1) {
                                                    CreateAndbindCheckBox(taxlist);
                                                    calculation();
                                                }

                                                else {

                                                    RemoveCheckBox(taxlist);
                                                    calculation();
                                                }

                                            }
                                            else
                                            {
                                                RemoveCheckBox(taxlist);
                                                calculation();
                                            }

                                        });

                                        function CreateAndbindCheckBox(pagelistdata) {
                                            //console.log(pagelistdata);
                                            for (var i = 0; i < pagelistdata.length; i++) {
                                                var divopen = '<div class="col-sm-2"><div class="form-check">';
                                                var createcheckbox = '<input class="form-check-input"  onclick="calculation();" value=' + pagelistdata[i].taxPercent + ' data-Id=' + pagelistdata[i].coaIdx + ' type="checkbox" name="tax">';
                                                var checkboxlabel = '<label class="form-check-label">' + pagelistdata[i].taxName + '</label>';
                                                var divclose = '</div></div>';
                                                var dictoappend = divopen + createcheckbox + checkboxlabel + divclose;
                                                $('#checkboxdiv').append(dictoappend);
                                                $('#checkboxdiv').show();

                                            }


                                        }


                                        function RemoveCheckBox(pagelistdata) {
                                            console.log(pagelistdata);
                                            for (var i = 0; i < pagelistdata.length; i++) {
                                                var divopen = '<div class="col-sm-2"><div class="form-check">';
                                                var createcheckbox = '<input class="form-check-input" data-Id=' + pagelistdata[i].idx + ' type="checkbox">';
                                                var checkboxlabel = '<label class="form-check-label">' + pagelistdata[i].taxName + '</label>';
                                                var divclose = '</div></div>';
                                                //var dictoappend = divopen + createcheckbox + checkboxlabel + divclose;
                                                //$('#checkboxdiv').append(dictoappend)
                                                $('#checkboxdiv').empty();
                                                $('#checkboxdiv').hide();
                                                //$('#mydiv').empty();
                                            }


                                        }



                                        $(document).ready(function () {

                                            $("#PaymentType").hide();
                                            $("#paymenttype").val("0");
                                            $("#bankIdx").val("0");
                                            $("#bankIdx")[0].selectedIndex = 0;
                                            $("#bankIdxaccorChequeNumber").val("");


                                        });



                                        //------------------------------------



                                        $('#purchaseDate').change(function () {
                                            var date = $(this).val();
                                            console.log(date, 'change')
                                            var GivenDate = date;
                                            var CurrentDate = new Date();
                                            GivenDate = new Date(GivenDate);

                                            if (GivenDate > CurrentDate) {
                                                alert('Given date is greater than the current date.');
                                                var today = moment().format('YYYY-MM-DD');
                                                $('#purchaseDate').val(today);
                                            } else {
                                                // alert('Given date is not greater than the current date.');
                                            }
                                        });

                                        function SomeDeleteRowFunction(o) {
                                            //alert(id);
                                            var $row = $(this).closest("tr"),        // Finds the closest row <tr>
                                                $tds = $row.find("td:nth-child(2)");
                                            //console.log($tds);

                                            $.each($tds, function () {                // Visits every single <td> element
                                                // console.log($(this).text());         // Prints out the text within the <td>
                                            });
                                            var itmmant = o.parentNode.parentNode.children[4].innerText;
                                            var tmnt = $('#TotalAmount').val();

                                            tmnt = tmnt - itmmant;
                                            $('#TotalAmount').val(tmnt);
                                            $('#NetAmount').val(tmnt);
                                            // $('#balanceAmount').val(tmnt);
                                            var p = o.parentNode.parentNode;

                                            p.parentNode.removeChild(p);
                                            $(this).closest('tr').remove();
                                            calculation();

                                        };

                                        function changeinunitprice(o) {
                                            //alert(id);
                                            var $row = $(this).closest("tr"),        // Finds the closest row <tr>
                                                 $tds = $row.find("td:nth-child(2)");
                                            //console.log($tds);


                                            var itmqty = o.parentNode.parentNode.children[2].innerText;

                                            var itmup = o.parentNode.parentNode.children[3].children[0].value;

                                            itmqty = Number(itmqty);
                                            itmup = Number(itmup);

                                            var tmnt = $('.tamnt').val()
                                            tmnt = Number(itmqty) * Number(itmup);

                                            $('.tamnt').val(tmnt);
                                            var totalamnt = o.parentNode.parentNode.children[4].innerText = (parseFloat(itmqty) * parseFloat(itmup));

                                            var tmnt = $('#TotalAmount').val();
                                            tmnt = Number(tmnt) + (Number(itmqty) * Number(itmup))
                                            $('#TotalAmount').val(tmnt)
                                            //alert(tmnt);



                                        };

                                        function gridValidation(Id) {
                                            errmsg = [];
                                            var myTab = $("#example2 tbody");
                                            var rtrn = true;

                                            // LOOP THROUGH EACH ROW OF THE TABLE AFTER HEADER.
                                            myTab.find('tr').each(function (i) {
                                                var $tds = $(this).find('td'),
                                                productid = $tds.eq(0).text();

                                                if (Id == productid) {
                                                    rtrn = false;
                                                    errmsg.push("Product Already exist");
                                                }
                                            })
                                            if ($('#itemIdx option:selected').val() == '') {
                                                rtrn = false;
                                                errmsg.push("Select Product");
                                            }
                                            if ($('#qty').val() <= 0) {
                                                rtrn = false;
                                                errmsg.push("Qty value is zero");
                                            }
                                            if ($('#unitPrice').val() <= 0) {
                                                rtrn = false;
                                                errmsg.push("unit value is zero");
                                            }
                                            //if ($('#DueDate').val() < 0) {
                                            //    rtrn = false;
                                            //    errmsg.push("DUE date is Invalid");
                                            //}
                                            //var dat = $('#DueDate').val()
                                            //console.log(moment((new Date())).format("DD-MM-YYYY"));
                                            //var today = moment((new Date())).format("DD-MM-YYYY");
                                            //var slctddte = moment(dat).format("DD-MM-YYYY");

                                            //if ((new Date($('#DueDate').val())) == 'Invalid Date') {
                                            //    rtrn = false;
                                            //    errmsg.push("DUE date is invalid ");
                                            //    // alert(errorarray.length);
                                            //}
                                            //if (slctddte < today) {
                                            //    rtrn = false;
                                            //    errmsg.push("DUE date is INVALID /Should be greater than current date");
                                            //    // alert(errorarray.length);
                                            //}
                                            return rtrn;
                                        }

                                        function displayerror() {
                                            for (var i = 0; i < errmsg.length; i++) {
                                                toastr.options = {
                                                    "closeButton": false,
                                                    "debug": false,
                                                    "newestOnTop": false,
                                                    "progressBar": false,
                                                    "positionClass": "toast-top-center",
                                                    "preventDuplicates": false,
                                                    "onclick": null,
                                                    "showDuration": "300",
                                                    "hideDuration": "1000",
                                                    "timeOut": "5000",
                                                    "extendedTimeOut": "1000",
                                                    "showEasing": "swing",
                                                    "hideEasing": "linear",
                                                    "showMethod": "fadeIn",
                                                    "hideMethod": "fadeOut"
                                                }
                                                Command: toastr["error"](errmsg[i], "")
                                            }
                                        }
                                        $("#calcfinal").click(function () {
                                            calculate();

                                        });
                                        function percentage(num, per) {
                                            console.log(num)
                                            var totalpercntage = (num / 100) * per;
                                            // console.log(totalpercntage)
                                            return totalpercntage
                                        }
                                        function calculate() {

                                            $('#TotalAmount').val($('#NetAmount').val());
                                            var count = 0;
                                            // alert("d")
                                            var totaltaxAmount = Number(0);
                                            $("#purchaseform input:checkbox:checked").each(function () {
                                                // alert($(this).val())

                                                if (($(this).val()) > 0) {

                                                    var taxpercent = $(this).attr('data-id');

                                                    var NetAmount = $('#NetAmount').val();
                                                    var currentAmount = (Number(NetAmount) / Number(100)) * Number(taxpercent)
                                                    totaltaxAmount = parseFloat(Number(currentAmount) + Number(totaltaxAmount)).toFixed(2)
                                                    //var NetAmntTaxValue = percentage(NetAmount, taxpercent);
                                                    //var totalamount = parseFloat($('#TotalAmount').val()) + parseFloat(NetAmntTaxValue);
                                                    //$('#TotalAmount').val(totalamount.toFixed(2));
                                                    //$('#TaxAmount').val(parseFloat($('#TaxAmount').val()) + parseFloat(NetAmntTaxValue));
                                                    count++;
                                                }


                                                // add $(this).val() to your array
                                            });
                                            $('#TaxAmount').val(totaltaxAmount);
                                            $('#TotalAmount').val(Number(totaltaxAmount) + Number($('#NetAmount').val()));
                                            $('#BalanceAmount').val($('#TotalAmount').val());
                                            if (count <= 0) {
                                                $('#TaxAmount').val('0.00');
                                                $('#TotalAmount').val($('#NetAmount').val());
                                            }

                                        }


                                        $('#paymenttype').on('change', function () {
                                            if ($('#paymenttype option:selected').val() == 0) {
                                                $('#paymntmethodoptions').hide();
                                                $('#divTxtPaid').hide();
                                                $('#paidAmount').val('0.00');
                                                calculation();
                                            }
                                            if ($('#paymenttype option:selected').val() == 1) {
                                                $('#paymntmethodoptions').hide();
                                                $('#divTxtPaid').show();
                                            }
                                            if ($('#paymenttype option:selected').val() == 3) {
                                                $('#paymntmethodoptions').show();
                                                $('#cheqno').hide();
                                                $('#bank').show();
                                                $('#divTxtPaid').show();
                                            }

                                            if ($('#paymenttype option:selected').val() == 2) {
                                                $('#paymntmethodoptions').show();
                                                $('#cheqno').show();
                                                $('#bank').show();
                                                $('#divTxtPaid').show();
                                            }
                                            if ($('#paymenttype option:selected').val() == 4) {
                                                $('#paymntmethodoptions').show();
                                                $('#customerIdx').trigger("change");
                                                $('#bank').show();

                                                $('#cheqno').hide();
                                                //$('#bank').hide()
                                                $("#bankIdx").prop('selectedIndex', 0);
                                                $('#divTxtPaid').show();
                                            }
                                        });

                                        if ($('#PaymentType').val() == 0) {
                                            // $('#divTxtPaid').hide();
                                            $('#paidAmount').val('0.00');
                                        }
                                        $('#PaidAmount').keyup(function () {
                                            //var paidAmount = Number($('#PaidAmount').val());
                                            //var balanceAmount = Number($('#BalanceAmount').val());
                                            //var netAmount = Number($('#NetAmount').val());
                                            //if (paidAmount > 0) {
                                            //    balanceAmount = balanceAmount - paidAmount;
                                            //    $('#BalanceAmount').val(balanceAmount)
                                            //}
                                            //else if (paidAmount > balanceAmount) {
                                            //    $('#BalanceAmount').val(netAmount);
                                            //    alert("Paid Amount Cannot Be Greater Than Balance Amount");
                                            //}
                                            //else {
                                            //    $('#BalanceAmount').val(netAmount);
                                            //    alert("Please Enter a Valid Number");
                                            //}

                                            var paidAmount = Number($('#PaidAmount').val());
                                            var balanceAmount = Number($('#BalanceAmount').val());
                                            var totalAmount = Number($('#TotalAmount').val());
                                            if (paidAmount > 0) {
                                                if (paidAmount > totalAmount) {
                                                    $('#BalanceAmount').val(totalAmount);
                                                    $('#PaidAmount').val('0');
                                                    alert("Paid Amount Cannot Be Greater Than Balance Amount");
                                                }
                                                else {
                                                    var remaingAmount = totalAmount - paidAmount;
                                                    $('#BalanceAmount').val(remaingAmount)
                                                }
                                                $('#PaymentType').show();
                                            }

                                            else {
                                                $('#BalanceAmount').val(totalAmount);
                                                alert("Please Enter a Valid Number");
                                                $('#PaymentType').hide();
                                                $('#banks').hide();
                                                $('#cheqno').hide();
                                                $('#paymenttype').val('0');
                                            }
                                        });
                                    </script>
                                }
                                                    }

}

